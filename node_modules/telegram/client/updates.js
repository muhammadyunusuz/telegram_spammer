"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._updateLoop = exports._dispatchUpdate = exports._processUpdate = exports._handleUpdate = exports.catchUp = exports.listEventHandlers = exports.removeEventHandler = exports.addEventHandler = exports.on = exports.StopPropagation = void 0;
const tl_1 = require("../tl");
const big_integer_1 = __importDefault(require("big-integer"));
const network_1 = require("../network");
const index_1 = require("../index");
const Helpers_1 = require("../Helpers");
const Logger_1 = require("../extensions/Logger");
const PING_INTERVAL = 9000; // 9 sec
const PING_TIMEOUT = 10000; // 10 sec
const PING_FAIL_ATTEMPTS = 3;
const PING_FAIL_INTERVAL = 100; // ms
const PING_DISCONNECT_DELAY = 60000; // 1 min
/**
 If this exception is raised in any of the handlers for a given event,
 it will stop the execution of all other registered event handlers.
 It can be seen as the ``StopIteration`` in a for loop but for events.
 */
class StopPropagation extends Error {
}
exports.StopPropagation = StopPropagation;
/** @hidden */
function on(client, event) {
    return (f) => {
        client.addEventHandler(f, event);
        return f;
    };
}
exports.on = on;
/** @hidden */
function addEventHandler(client, callback, event) {
    if (event == undefined) {
        // recursive imports :(
        const raw = require("../events/Raw").Raw;
        event = new raw({});
    }
    event.client = client;
    client._eventBuilders.push([event, callback]);
}
exports.addEventHandler = addEventHandler;
/** @hidden */
function removeEventHandler(client, callback, event) {
    client._eventBuilders = client._eventBuilders.filter(function (item) {
        return item[0] !== event && item[1] !== callback;
    });
}
exports.removeEventHandler = removeEventHandler;
/** @hidden */
function listEventHandlers(client) {
    return client._eventBuilders;
}
exports.listEventHandlers = listEventHandlers;
/** @hidden */
function catchUp() {
    // TODO
}
exports.catchUp = catchUp;
/** @hidden */
function _handleUpdate(client, update) {
    if (typeof update === "number") {
        if ([-1, 0, 1].includes(update)) {
            _dispatchUpdate(client, {
                update: new network_1.UpdateConnectionState(update),
            });
            return;
        }
    }
    //this.session.processEntities(update)
    client._entityCache.add(update);
    client.session.processEntities(update);
    if (update instanceof tl_1.Api.Updates ||
        update instanceof tl_1.Api.UpdatesCombined) {
        // TODO deal with entities
        const entities = new Map();
        for (const x of [...update.users, ...update.chats]) {
            entities.set(index_1.utils.getPeerId(x), x);
        }
        for (const u of update.updates) {
            _processUpdate(client, u, update.updates, entities);
        }
    }
    else if (update instanceof tl_1.Api.UpdateShort) {
        _processUpdate(client, update.update, null);
    }
    else {
        _processUpdate(client, update, null);
    }
}
exports._handleUpdate = _handleUpdate;
/** @hidden */
function _processUpdate(client, update, others, entities) {
    update._entities = entities || new Map();
    const args = {
        update: update,
        others: others,
    };
    _dispatchUpdate(client, args);
}
exports._processUpdate = _processUpdate;
/** @hidden */
async function _dispatchUpdate(client, args) {
    for (const [builder, callback] of client._eventBuilders) {
        if (!builder.resolved) {
            await builder.resolve(client);
        }
        let event = args.update;
        if (event) {
            if (!client._selfInputPeer) {
                client.getMe(true).catch(() => {
                    // do nothing
                });
            }
            if (!(event instanceof network_1.UpdateConnectionState)) {
                // TODO fix me
            }
            // TODO fix others not being passed
            event = builder.build(event, callback, client._selfInputPeer
                ? Helpers_1.returnBigInt(client._selfInputPeer.userId)
                : undefined);
            if (event) {
                if ("_eventName" in event) {
                    event._setClient(client);
                    event.originalUpdate = args.update;
                    event._entities = args.update._entities;
                }
                const filter = await builder.filter(event);
                if (!filter) {
                    continue;
                }
                try {
                    await callback(event);
                }
                catch (e) {
                    if (e instanceof StopPropagation) {
                        break;
                    }
                    console.error(e);
                }
            }
        }
    }
}
exports._dispatchUpdate = _dispatchUpdate;
/** @hidden */
async function _updateLoop(client) {
    while (!client._destroyed) {
        await Helpers_1.sleep(PING_INTERVAL);
        if (client._reconnecting) {
            continue;
        }
        if (client._destroyed) {
            return;
        }
        try {
            await attempts(() => {
                return timeout(client._sender.send(new tl_1.Api.PingDelayDisconnect({
                    pingId: big_integer_1.default(Helpers_1.getRandomInt(Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER)),
                    disconnectDelay: PING_DISCONNECT_DELAY,
                })), PING_TIMEOUT);
            }, PING_FAIL_ATTEMPTS, PING_FAIL_INTERVAL);
        }
        catch (err) {
            // eslint-disable-next-line no-console
            client._log.error(err);
            if (client._log.canSend(Logger_1.LogLevel.ERROR)) {
                console.error(err);
            }
            if (client._reconnecting) {
                continue;
            }
            await client.disconnect();
            await client.connect();
        }
        // We need to send some content-related request at least hourly
        // for Telegram to keep delivering updates, otherwise they will
        // just stop even if we're connected. Do so every 30 minutes.
        // TODO Call getDifference instead since it's more relevant
        if (new Date().getTime() - (client._lastRequest || 0) >
            30 * 60 * 1000) {
            try {
                await client.invoke(new tl_1.Api.updates.GetState());
            }
            catch (e) {
                // we don't care about errors here
            }
        }
    }
    await client.disconnect();
}
exports._updateLoop = _updateLoop;
/** @hidden */
async function attempts(cb, times, pause) {
    for (let i = 0; i < times; i++) {
        try {
            // We need to `return await` here so it can be caught locally
            return await cb();
        }
        catch (err) {
            if (i === times - 1) {
                throw err;
            }
            await Helpers_1.sleep(pause);
        }
    }
    return undefined;
}
/** @hidden */
function timeout(promise, ms) {
    return Promise.race([
        promise,
        Helpers_1.sleep(ms).then(() => Promise.reject(new Error("TIMEOUT"))),
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2dyYW1qcy9jbGllbnQvdXBkYXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSw4QkFBNEI7QUFFNUIsOERBQWlDO0FBQ2pDLHdDQUFtRDtBQUVuRCxvQ0FBaUM7QUFDakMsd0NBQStEO0FBQy9ELGlEQUFnRDtBQUVoRCxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsQ0FBQyxRQUFRO0FBQ3BDLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUFDLFNBQVM7QUFDckMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7QUFDN0IsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLO0FBQ3JDLE1BQU0scUJBQXFCLEdBQUcsS0FBSyxDQUFDLENBQUMsUUFBUTtBQUM3Qzs7OztHQUlHO0FBQ0gsTUFBYSxlQUFnQixTQUFRLEtBQUs7Q0FBRztBQUE3QywwQ0FBNkM7QUFDN0MsY0FBYztBQUNkLFNBQWdCLEVBQUUsQ0FBQyxNQUFzQixFQUFFLEtBQW9CO0lBQzNELE9BQU8sQ0FBQyxDQUF5QixFQUFFLEVBQUU7UUFDakMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakMsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDLENBQUM7QUFDTixDQUFDO0FBTEQsZ0JBS0M7QUFFRCxjQUFjO0FBQ2QsU0FBZ0IsZUFBZSxDQUMzQixNQUFzQixFQUN0QixRQUEwQixFQUMxQixLQUFvQjtJQUVwQixJQUFJLEtBQUssSUFBSSxTQUFTLEVBQUU7UUFDcEIsdUJBQXVCO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDekMsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBUSxDQUFDO0tBQzlCO0lBQ0QsS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFD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